<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_s_f_m_l_drawing_vistor_8cpp" kind="file" language="C++">
    <compoundname>SFMLDrawingVistor.cpp</compoundname>
    <includes refid="_s_f_m_l_drawing_visitor_8h" local="yes">SFMLDrawingVisitor.h</includes>
    <incdepgraph>
      <node id="3">
        <label>SFML/Graphics.hpp</label>
      </node>
      <node id="7">
        <label>Visitor.h</label>
        <link refid="_visitor_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>AbstractDrawingVisitor.h</label>
        <link refid="_abstract_drawing_visitor_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="1">
        <label>classes/SFMLDrawingVistor.cpp</label>
        <link refid="_s_f_m_l_drawing_vistor_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>SFML/Graphics/Sprite.hpp</label>
      </node>
      <node id="2">
        <label>SFMLDrawingVisitor.h</label>
        <link refid="_s_f_m_l_drawing_visitor_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>TextureFactory.h</label>
        <link refid="_texture_factory_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>SpriteProxy.h</label>
        <link refid="_sprite_proxy_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;SFMLDrawingVisitor.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal">SFMLDrawingVisitor::SFMLDrawingVisitor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)<sp/>{</highlight></codeline>
<codeline lineno="3"><highlight class="normal"><sp/><sp/>this-&gt;window<sp/>=</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;sf::RenderWindow&gt;(sf::VideoMode(width,<sp/>height),<sp/></highlight><highlight class="stringliteral">&quot;Game&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/>this-&gt;tf<sp/>=<sp/>std::make_shared&lt;TextureFactory&gt;();</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/>this-&gt;open<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="class_s_f_m_l_drawing_visitor_1affc928db69d8762b84ca1c57c4d34c97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_f_m_l_drawing_visitor_1affc928db69d8762b84ca1c57c4d34c97" kindref="member">SFMLDrawingVisitor::visit</ref>(std::shared_ptr&lt;SpriteProxy&gt;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NECESSARY:<sp/>Check<sp/>if<sp/>window<sp/>is<sp/>still<sp/>open</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/>sf::Event<sp/>event;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;window-&gt;isOpen())<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>explore<sp/>way<sp/>to<sp/>watch<sp/>for<sp/>events<sp/>on<sp/>window<sp/>smarter....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;window-&gt;pollEvent(event))<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event.type<sp/>==<sp/>sf::Event::Closed)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;window-&gt;close();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;open<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>if;<sp/>window<sp/>is<sp/>closed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>if<sp/>;<sp/>check<sp/>event<sp/>poll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>REFRESH<sp/>SCREEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;window-&gt;clear(sf::Color::White);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.a.<sp/>Add<sp/>sprite<sp/>to<sp/>local<sp/>drawing<sp/>cache<sp/>if<sp/>not<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>this-&gt;renderList.find(s);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sprite<sp/>not<sp/>in<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(f<sp/>==<sp/>renderList.end())<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>&amp;<sp/>configure<sp/>sprite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;renderList[s]<sp/>=<sp/>std::make_shared&lt;sf::Sprite&gt;();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.b.<sp/>refresh<sp/>spriteProxy<sp/>-&gt;<sp/>sprite<sp/>pairing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;renderList[s]-&gt;setTexture(*this-&gt;tf-&gt;getTexture(s-&gt;getTextureLocation()));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;renderList[s]-&gt;setTextureRect(sf::IntRect(0,0,s-&gt;getWidth(),s-&gt;getHeight()));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;renderList[s]-&gt;setPosition(s-&gt;getX(),<sp/>s-&gt;getY());</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37" refid="class_s_f_m_l_drawing_visitor_1a65e69df1e108073052315b80eb0b5514" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_s_f_m_l_drawing_visitor_1a65e69df1e108073052315b80eb0b5514" kindref="member">SFMLDrawingVisitor::isOpen</ref>(){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;open;}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_s_f_m_l_drawing_visitor_1a26218dc60bc0a3f264ca11f9307a909f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_s_f_m_l_drawing_visitor_1a26218dc60bc0a3f264ca11f9307a909f" kindref="member">SFMLDrawingVisitor::draw</ref>()<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>redraw<sp/>all<sp/>sprites<sp/>on<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>this<sp/>will<sp/>refresh<sp/>screen<sp/>every<sp/>time<sp/>a<sp/>sprite<sp/>is<sp/>visited.....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>this-&gt;renderList.begin();<sp/>i<sp/>!=<sp/>this-&gt;renderList.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;window-&gt;draw(*i-&gt;second);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>this-&gt;window-&gt;display();</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="classes/SFMLDrawingVistor.cpp"/>
  </compounddef>
</doxygen>
